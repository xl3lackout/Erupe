# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

contexts:
  - name: master
    prelude: |
      $LOAD_PATH.unshift(File.expand_path("ext/arrow"))
      $LOAD_PATH.unshift(File.expand_path("lib"))
prelude: |-
  require "arrow"
  require "faker"

  state = ENV.fetch("FAKER_RANDOM_SEED", 17).to_i
  Faker::Config.random = Random.new(state)

  n_values = 1000
  type = Arrow::TimestampDataType.new(:micro)
  base_timestamp = Time.at(Faker::Number.within(range: 0 ... 1_000_000_000))
  thirty_days_in_sec = 30*24*3600
  timestamp_range = {
    from: base_timestamp - thirty_days_in_sec,
    to: base_timestamp + thirty_days_in_sec,
  }

  values = n_values.times.map do
    sec = Faker::Time.between(timestamp_range).to_i
    micro = Faker::Number.within(range: 0 ... 1_000_000)
    sec * 1_000_000 + micro
  end
  array = Arrow::TimestampArray.new(type, values)
benchmark:
  pure_ruby: |-
    array.collect.to_a
  values: |-
    array.values
