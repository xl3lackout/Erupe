# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
[
  { include: ["<ext/new_allocator.h>", private, "<cstddef>", public ] },
  { include: ["<ext/alloc_traits.h>", private, "<memory>", public ] },
  { include: ["<ext/alloc_traits.h>", private, "<condition_variable>", public ] },
  { include: ["<ext/alloc_traits.h>", private, "<deque>", public ] },
  { include: ["<ext/alloc_traits.h>", private, "<forward_list>", public ] },
  { include: ["<ext/alloc_traits.h>", private, "<future>", public ] },
  { include: ["<ext/alloc_traits.h>", private, "<map>", public ] },
  { include: ["<ext/alloc_traits.h>", private, "<set>", public ] },
  { include: ["<ext/alloc_traits.h>", private, "<string>", public ] },
  { include: ["<ext/alloc_traits.h>", private, "<unordered_map>", public ] },
  { include: ["<ext/alloc_traits.h>", private, "<unordered_set>", public ] },
  { include: ["<ext/alloc_traits.h>", private, "<vector>", public ] },
  { include: ["<bits/exception.h>", private, "<exception>", public ] },
  { include: ["<bits/stdint-intn.h>", private, "<cstdint>", public ] },
  { include: ["<bits/stdint-uintn.h>", private, "<cstdint>", public ] },
  { include: ["<bits/shared_ptr.h>", private, "<memory>", public ] },
  { include: ["<initializer_list>", public, "<vector>", public ] },
  { include: ["<stdint.h>", public, "<cstdint>", public ] },
  { include: ["<string.h>", public, "<cstring>", public ] },
  { symbol: ["bool", private, "<cstdint>", public ] },
  { symbol: ["false", private, "<cstdint>", public ] },
  { symbol: ["true", private, "<cstdint>", public ] },
  { symbol: ["int8_t", private, "<cstdint>", public ] },
  { symbol: ["int16_t", private, "<cstdint>", public ] },
  { symbol: ["int32_t", private, "<cstdint>", public ] },
  { symbol: ["int64_t", private, "<cstdint>", public ] },
  { symbol: ["uint8_t", private, "<cstdint>", public ] },
  { symbol: ["uint16_t", private, "<cstdint>", public ] },
  { symbol: ["uint32_t", private, "<cstdint>", public ] },
  { symbol: ["uint64_t", private, "<cstdint>", public ] },
  { symbol: ["size_t", private, "<cstddef>", public ] },
  { symbol: ["variant", private, "\"arrow/compute/kernel.h\"", public ] },
  { symbol: ["default_memory_pool", private, "\"arrow/type_fwd.h\"", public ] },
  { symbol: ["make_shared", private, "<memory>", public ] },
  { symbol: ["shared_ptr", private, "<memory>", public ] },
  { symbol: ["_Node_const_iterator", private, "<flatbuffers/flatbuffers.h>", public ] },
  { symbol: ["unordered_map<>::mapped_type", private, "<flatbuffers/flatbuffers.h>", public ] },
  { symbol: ["std::copy", private, "<algorithm>", public ] },
  { symbol: ["std::move", private, "<utility>", public ] },
  { symbol: ["std::transform", private, "<algorithm>", public ] },
  { symbol: ["pair", private, "<utility>", public ] },
  { symbol: ["errno", private, "<cerrno>", public ] },
  { symbol: ["posix_memalign", private, "<cstdlib>", public ] }
]
